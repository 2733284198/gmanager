// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package sys_department

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table sys_department.
type Entity struct {
	Id         int64  `orm:"id,primary"  json:"id"`          // 主键
	ParentId   int    `orm:"parent_id"   json:"parent_id"`   // 上级机构
	Name       string `orm:"name,unique" json:"name"`        // 部门/11111
	Code       string `orm:"code"        json:"code"`        // 机构编码
	Sort       int    `orm:"sort"        json:"sort"`        // 序号
	Linkman    string `orm:"linkman"     json:"linkman"`     // 联系人
	LinkmanNo  string `orm:"linkman_no"  json:"linkman_no"`  // 联系人电话
	Remark     string `orm:"remark"      json:"remark"`      // 机构描述
	Enable     int    `orm:"enable"      json:"enable"`      // 是否启用//radio/1,启用,2,禁用
	UpdateTime string `orm:"update_time" json:"update_time"` // 更新时间
	UpdateId   int64  `orm:"update_id"   json:"update_id"`   // 更新人
	CreateTime string `orm:"create_time" json:"create_time"` // 创建时间
	CreateId   int64  `orm:"create_id"   json:"create_id"`   // 创建者
}

// SysDepartment is alias of Entity, which some developers say they just want.
type SysDepartment = Entity

// New creates and returns an *Entity.
func New() *Entity {
	return new(Entity)
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
